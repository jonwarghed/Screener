// Generated by CoffeeScript 1.7.1
(function() {
  var WeatherViewModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WeatherViewModel = (function() {
    var iconTable, weatherParams;

    iconTable = {
      '01d': 'wi-day-sunny',
      '02d': 'wi-day-cloudy',
      '03d': 'wi-cloudy',
      '04d': 'wi-cloudy-windy',
      '09d': 'wi-showers',
      '10d': 'wi-rain',
      '11d': 'wi-thunderstorm',
      '13d': 'wi-snow',
      '50d': 'wi-fog',
      '01n': 'wi-night-clear',
      '02n': 'wi-night-cloudy',
      '03n': 'wi-night-cloudy',
      '04n': 'wi-night-cloudy',
      '09n': 'wi-night-showers',
      '10n': 'wi-night-rain',
      '11n': 'wi-night-thunderstorm',
      '13n': 'wi-night-snow',
      '50n': 'wi-night-alt-cloudy-windy'
    };

    weatherParams = {
      'q': 'Gothenburg,Sweden',
      'units': 'metric'
    };

    function WeatherViewModel() {
      this.updateCurrentWeather = __bind(this.updateCurrentWeather, this);
      this.weatherData = ko.observable();
      this.sunrise = ko.computed((function(_this) {
        return function() {
          return new Date(_this.weatherData.sys.sunrise * 1000).toTimeString().substring(0, 5);
        };
      })(this));
      this.sunset = ko.computed((function(_this) {
        return function() {
          return new Date(_this.weatherData.sys.sunset * 1000).toTimeString().substring(0, 5);
        };
      })(this));
      this.wind = ko.computed((function(_this) {
        return function() {
          return Math.round(_this.weatherData.wind.speed);
        };
      })(this));
      this.temperature = ko.computed((function(_this) {
        return function() {
          return Math.round(_this.weatherData.main.temp);
        };
      })(this));
      this.weatherIcon = ko.computed((function(_this) {
        return function() {
          return _this.iconTable[_this.weatherData.weather[0].icon];
        };
      })(this));
      this.isSunrise = ko.computed((function(_this) {
        return function() {
          var _ref;
          return (_this.weatherData.sys.sunrise * 1000 < (_ref = new Date) && _ref < _this.weatherData.sys.sunset * 1000);
        };
      })(this));
      setInterval(this.updateCurrentWeather, 60000);
    }

    WeatherViewModel.prototype.updateCurrentWeather = function() {
      return $.getJSON('http://api.openweathermap.org/data/2.5/weather', weatherParams, this.weatherData);
    };

    return WeatherViewModel;

  })();

  $(function() {
    return ko.applyBindings(new NewsViewModel);
  });

}).call(this);

//# sourceMappingURL=weather.map
